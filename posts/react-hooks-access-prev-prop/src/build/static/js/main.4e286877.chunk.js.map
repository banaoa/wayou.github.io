{"version":3,"sources":["App.js","ClassApp.js","serviceWorker.js","index.js"],"names":["Counter","_ref","initialCount","_useState","useState","_useState2","Object","slicedToArray","count","setCount","prevCountRef","useRef","useEffect","current","react_default","a","createElement","onClick","App","_useState3","_useState4","className","App_Counter","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","state","nextProps","_this2","Component","_this3","_this4","ClassApp_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","ClassApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e286877.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction Counter({ initialCount }) {\n  const [count, setCount] = useState(initialCount)\n  const prevCountRef = useRef(initialCount);\n  useEffect(() => {\n    prevCountRef.current = initialCount;\n  })\n\n  if (initialCount !== prevCountRef.current && count !== initialCount) {\n    setCount(initialCount)\n  }\n  \n  return <div>\n    <p>counter2:{count}</p>\n    <div>\n      <button onClick={() => { setCount(count + 1) }}>+</button>\n    </div >\n  </div >\n}\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <div className=\"App\">\n      <h3>hook ver</h3>\n      <p>counter1:{count}</p>\n      <div>\n        <button onClick={() => { setCount(count + 1) }}>+</button>\n      </div>\n      <Counter initialCount={count}></Counter>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: props.initialCount\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.initialCount !== this.props.initialCount) {\n      this.setState({\n        count: nextProps.initialCount\n      })\n    }\n  }\n\n  setCount = (count) => {\n    this.setState({\n      count\n    })\n  }\n\n  render() {\n    const { count } = this.state;\n    return <div>\n      <p>counter2:{count}</p>\n      <div>\n        <button onClick={() => { this.setCount(count + 1) }} >+</button>\n      </div >\n    </div >\n  }\n\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    }\n  }\n  setCount = (count) => {\n    this.setState({\n      count\n    })\n  }\n  render() {\n    const count = this.state.count;\n    return (\n      <div className=\"App\" >\n        <h3>class ver</h3>\n        <p>counter1:{count}</p>\n        <div>\n          <button onClick={() => { this.setCount(count + 1) }}>+</button>\n        </div>\n        <hr />\n        <Counter initialCount={count}></Counter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ClassApp from './ClassApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<div>\n    <App />\n    <hr/>\n    <ClassApp></ClassApp>\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}